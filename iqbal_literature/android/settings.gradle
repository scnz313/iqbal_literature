// Configure the Flutter plugin using Gradle plugins DSL
pluginManagement {
    def flutterSdkPath = {
        def properties = new Properties()
        file("local.properties").withInputStream { properties.load(it) }
        def flutterSdkPath = properties.getProperty("flutter.sdk")
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
        return flutterSdkPath
    }()

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "dev.flutter.flutter-plugin-loader" version "1.0.0"
    id "com.android.application" version "8.2.1" apply false
    id "org.jetbrains.kotlin.android" version "1.9.22" apply false
    id "com.google.gms.google-services" version "4.4.0" apply false
    id "com.google.firebase.crashlytics" version "2.9.9" apply false
}

// Set the project name for better path handling
rootProject.name = "android"
include ":app"

// Include Flutter plugins
def flutterProjectRoot = rootProject.projectDir.parentFile.toPath()

// Directly load the plugins.gradle file which contains the proper plugin setup
def plugins = new Properties()
def pluginsFile = new File(flutterProjectRoot.toFile(), '.flutter-plugins')
if (pluginsFile.exists()) {
    pluginsFile.withReader('UTF-8') { reader -> plugins.load(reader) }
}

// Only include plugins with existing android directories
plugins.each { name, path ->
    if (name != 'speech_to_text') {
        def pluginDirectory = flutterProjectRoot.resolve(path).resolve('android').toFile()
        if (pluginDirectory.exists()) {
            include ":$name"
            project(":$name").projectDir = pluginDirectory
        }
    }
} 